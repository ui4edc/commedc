<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
 
<mapper namespace="cn.com.ecrf.trq.repository.DictMapper">
	<select id="getUnDealDictList" resultType="cn.com.ecrf.trq.model.dict.DictSnapshot">
		select d.id as id,
			   d.name as name,
			   count(i.type) as untreated
		from dt_dictname d left join dt_itemdict i
		on d.name=i.type
		group by d.abbr
	</select>
	<select id="getDictRowList" resultType="cn.com.ecrf.trq.model.dict.DictRow" parameterType="int">
		select 	i.id as id,
				i.name as name,
				i.abbr as abbr,
				b.id   as baseItemId,
				b.name as baseItemName,
				b.abbr as baseItemAbbr
		from dt_dictname d,dt_itemdict i left join dt_basedict b
		on i.fk_base_id=b.id
		where i.type=d.name and d.id=#{id}
	</select>
	<select id="getBasicList" resultType="cn.com.ecrf.trq.model.dict.DictRow" parameterType="string">
		select 	
				b.id   as baseItemId,
				b.name as baseItemName,
				b.abbr as baseItemAbbr
		from dt_basedict b
		where b.name like '%'||#{name}||'%' or b.abbr like '%'||#{name}||'%'
	</select>
	<update id="addItemToBase" parameterType="map">
		update dt_itemdict set fk_base_id=#{baseItemId} where id=#{selectedItemId}
	</update>
	<select id="getStaticDict" parameterType="cn.com.ecrf.trq.model.dict.StaticDict" resultType="cn.com.ecrf.trq.model.dict.StaticDict">
		select id as id, name as name
		from dt_staticdict where typeabbr=#{typeabbr} 
		<if test="abbr != null and abbr != ''" >
        	and abbr like #{abbr}
      	</if>
	</select>
	<update id="updateStaticDict" parameterType="cn.com.ecrf.trq.model.dict.StaticDict">
		update dt_staticdict set abbr=#{abbr} where id=#{id}
	</update>
  	<insert id="insertDictRow" parameterType="cn.com.ecrf.trq.model.dict.DictRow">
  		insert into dt_itemdict(name,abbr,type,type_abbr) values(#{name},#{abbr},#{type}, #{typeAbbr});
  	</insert>
  	<select id="getDictRow" parameterType="cn.com.ecrf.trq.model.dict.DictRow">
  		select name as name,
  				abbr as abbr,
  				type as type,
  				type_abbr as typeAbbr
  		from dt_itemdict where name like #{name} and type=#{type}
  	</select>
</mapper>