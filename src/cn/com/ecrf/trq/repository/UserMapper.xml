<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="cn.com.ecrf.trq.repository.UserMapper" >
	
	
  <resultMap id="BaseResultMap" type="cn.com.ecrf.trq.model.User" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="display_name" property="displayName" jdbcType="VARCHAR" />
    <result column="fk_organization_id" property="organizationId" jdbcType="INTEGER" />
    <result column="fk_organization_name" property="organizationName" jdbcType="VARCHAR" />
    <result column="fk_role_id" property="roleId" jdbcType="INTEGER" />
    <result column="fk_role_name" property="roleName" jdbcType="VARCHAR" />
    <result column="fk_adminuser_id" property="adminUserId" jdbcType="INTEGER" />
    <result column="fk_crmuser_id" property="crmUserId" jdbcType="INTEGER" />
    <result column="contact" property="contact" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="create_by" property="createBy" jdbcType="VARCHAR" />
    <result column="update_by" property="updateBy" jdbcType="VARCHAR" />
  </resultMap>
  
  <resultMap id="RoleResultMap" type="cn.com.ecrf.trq.model.Role" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="role_name" property="roleName" jdbcType="VARCHAR" />
    <result column="role_desc" property="roleDesc" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="create_by" property="createBy" jdbcType="VARCHAR" />
    <result column="update_by" property="updateBy" jdbcType="VARCHAR" />
  </resultMap>
  
  <sql id="Base_Column_List" >
    id, user_name, status, display_name, fk_organization_id, fk_organization_name, contact, fk_role_id, fk_role_name, fk_adminuser_id, fk_adminuser_name, create_time, update_time, update_by
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="int" >
    select 
    <include refid="Base_Column_List" />, password 
    from ac_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="int" >
    delete from ac_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insertUser" parameterType="cn.com.ecrf.trq.model.User"  >
  	<selectKey resultType="Integer" order="AFTER" keyProperty="id">
	SELECT LAST_INSERT_ID()
	</selectKey>
    insert into ac_user (id, user_name, status, 
      password, display_name, fk_organization_id, contact, create_time, fk_role_id, fk_adminuser_id, 
      fk_organization_name, fk_role_name, fk_adminuser_name)
    values (#{id}, #{userName,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, 
      #{password,jdbcType=VARCHAR}, #{displayName,jdbcType=VARCHAR},#{organizationId,jdbcType=VARCHAR},
      #{contact,jdbcType=VARCHAR},current_timestamp(), #{roleId}, #{adminUserId}, #{organizationName}, #{roleName}, #{adminUserName})
  </insert>
  <insert id="insertSelective" parameterType="cn.com.ecrf.trq.model.User" >
    insert into ac_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userName != null" >
        user_name,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="password != null" >
        password,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userName != null" >
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="findUserByLoginName" resultMap="BaseResultMap" parameterType="string" >
    select 
    <include refid="Base_Column_List" />, password
    from ac_user
    where user_name = #{userName}
  </select>
  <select id="getUserById" resultMap="BaseResultMap" parameterType="string">
  	select 
  	<include refid="Base_Column_List" />, password
  	from ac_user
  	where id=#{id}
  </select>
  <update id="updateUser" parameterType="cn.com.ecrf.trq.model.User">
  		update ac_user set
		user_name=#{userName}, display_name=#{displayName},
		status=#{status}, update_time= now()
		<if test="organizationId != null" >
        	,fk_organization_id=#{organizationId}, fk_organization_name=#{organizationName}
      	</if>
      	<if test="roleId != null" >
        	,fk_role_id=#{roleId}, fk_role_name=#{roleName}
      	</if>
      	<if test="adminUserId != null" >
        	,fk_adminuser_id=#{adminUserId}, fk_adminuser_name=#{adminUserName}
      	</if>
      	<if test="contact != null" >
        	,contact=#{contact}
      	</if>
      	<if test="updateBy != null" >
        	,update_by=#{updateBy}
      	</if>
  		where id=#{id}
  </update>
  <select id="findUsers" resultMap="BaseResultMap" parameterType="map" >
	select
	u.id as id, 
	u.user_name as userName, 
	u.display_name as displayName, 
	u.fk_organization_id as organizationId, 
	o.organization_name as organizationName, 
	u.contact as contact, 
	u.fk_role_id as roleId, 
	r.role_desc as roleDesc, 
	u.fk_adminuser_id as adminUserId, 
	u2.display_name as adminUserName,
	r.role_name as roleName
    from ac_user u left join ac_organization o on o.id=u.fk_organization_id left join ac_role r on u.fk_role_id=r.id
    left join ac_user u2 on u.fk_adminuser_id=u2.id
    <if test="limitStart != null" >
     LIMIT #{limitStart},#{limitSize} 
     </if>
  </select>
  <select id="findAdminUsers" resultMap="BaseResultMap" parameterType="map" >
    select 
    u.id, u.user_name, u.status, u.display_name 
    from ac_user u, ac_role r where u.fk_role_id=r.id and r.role_name='LCRO'
    <if test="limitStart != null" >
     LIMIT #{limitStart},#{limitSize} 
     </if>
  </select>
  <select id="findCRMUsers" resultMap="BaseResultMap">
    select 
    u.id, u.user_name, u.status, u.display_name 
    from ac_user u, ac_role r where u.fk_role_id=r.id and r.role_name='CRM'
    <if test="limitStart != null" >
     LIMIT #{limitStart},#{limitSize} 
     </if>
  </select>
  <select id="getUserNum" resultType="int">
  	select count(*) from ac_user
  </select>
  <update id="updatePassword" parameterType="cn.com.ecrf.trq.model.User">
  	update ac_user set password=#{password} where id=#{id}
  </update>
  <!-- role -->
  <!--<sql id="Role_Column_List" >
    id, role_name, role_desc, create_time, update_time, update_time, update_by
  </sql>
  <insert id="insertRole" parameterType="cn.com.ecrf.trq.model.Role">
  	<selectKey resultType="int" keyProperty="id" order="BEFORE">
      SELECT AC_ROLE_SEQ.NEXTVAL FROM DUAL
      </selectKey>
  	insert into ac_role(id, role_name, role_desc, create_time, create_by)
  	values(#{id}, #{roleName}, #{roleDesc}, now(), #{createBy})
  </insert>
  <update id="updateRole" parameterType="cn.com.ecrf.trq.model.Role">
  	update ac_role set role_name=#{roleName}, role_desc=#{roleDesc}, update_time=now(),
  	update_by=#{updateBy} where id=#{id}
  </update>
  <delete id="deleteRoleById" parameterType="int">
  	delete from ac_role where id=#{id}
  </delete>
   <select id="getRoleById" parameterType="int" resultMap="RoleResultMap">
  	select 
    <include refid="Role_Column_List" />
    from ac_role where id=#{id}
  </select>
  <select id="findRoleByName" parameterType="string" resultMap="RoleResultMap">
  	select 
    <include refid="Role_Column_List" />
    from ac_role where id=#{roleName}
  </select>-->
</mapper>